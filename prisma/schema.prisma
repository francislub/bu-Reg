// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String    @unique
  emailVerified    DateTime?
  password         String
  image            String?
  role             String    @default("STUDENT") // STUDENT, STAFF, REGISTRAR
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  profileId        String?   @unique
  profile          Profile?  @relation(fields: [profileId], references: [id], onDelete: SetNull)
  resetToken       String?
  resetTokenExpiry DateTime?

  // Relations
  registrations    Registration[]
  courseUploads    CourseUpload[]
  registrationCards RegistrationCard[]
  notifications    Notification[]
  approvals        Approval[]
}

model Profile {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName         String
  middleName        String?
  lastName          String
  dateOfBirth       DateTime?
  gender            String?
  nationality       String?
  maritalStatus     String?
  religion          String?
  church            String?
  responsibility    String?
  referralSource    String?
  physicallyDisabled Boolean  @default(false)
  avatar            String?
  phone             String?
  address           String?
  studentId         String?
  program           String?
  programId         String?  @db.ObjectId
  departmentId      String?  @db.ObjectId
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User?
}

model AcademicYear {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  startDate DateTime
  endDate   DateTime
  isCurrent Boolean    @default(false)
  isActive  Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  semesters Semester[]
}

model Semester {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  startDate      DateTime
  endDate        DateTime
  isActive       Boolean          @default(false)
  academicYearId String           @db.ObjectId
  academicYear   AcademicYear     @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relations
  registrations  Registration[]
  courseUploads  CourseUpload[]
  semesterCourses SemesterCourse[]
  registrationCards RegistrationCard[]
}

model Department {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  code        String        @unique
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  courses     Course[]
  programs    Program[]
}

model Program {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  code          String     @unique
  type          String     // UNDERGRADUATE, GRADUATE, DIPLOMA, CERTIFICATE
  duration      Int        // Duration in years
  description   String?
  departmentId  String     @db.ObjectId
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Relations
  department    Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  programCourses ProgramCourse[]
}

model ProgramCourse {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  programId  String   @db.ObjectId
  courseId   String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  program    Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([programId, courseId])
}

model Course {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  code        String        @unique
  title       String
  credits     Int
  description String?
  departmentId String       @db.ObjectId
  department  Department    @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  courseUploads CourseUpload[]
  semesterCourses SemesterCourse[]
  programCourses ProgramCourse[]
}

model SemesterCourse {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  semesterId String   @db.ObjectId
  courseId   String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  semester   Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([semesterId, courseId])
}

model Registration {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  semesterId String   @db.ObjectId
  status     String   @default("PENDING") // PENDING, APPROVED, REJECTED
  rejectionReason String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  semester   Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  courseUploads CourseUpload[]

  @@unique([userId, semesterId])
}

model CourseUpload {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  registrationId String   @db.ObjectId
  courseId       String   @db.ObjectId
  userId         String   @db.ObjectId
  semesterId     String   @db.ObjectId
  status         String   @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  registration   Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  course         Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  semester       Semester     @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  approvals      Approval[]
}

model Approval {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  courseUploadId String   @db.ObjectId
  approverId     String   @db.ObjectId
  status         String   // APPROVED, REJECTED
  comments       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  courseUpload   CourseUpload @relation(fields: [courseUploadId], references: [id], onDelete: Cascade)
  approver       User         @relation(fields: [approverId], references: [id], onDelete: Cascade)
}

model RegistrationCard {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  semesterId  String   @db.ObjectId
  cardNumber  String   @unique
  issuedDate  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  semester    Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  title     String
  message   String
  type      String   // INFO, WARNING, SUCCESS, ERROR
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Backup {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  filename  String
  path      String
  size      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Announcement {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  authorId    String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
