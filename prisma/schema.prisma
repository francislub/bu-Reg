// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  role      String   @default("STUDENT") // STUDENT, STAFF, REGISTRAR
  profileId String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile          Profile?          @relation(fields: [profileId], references: [id])
  courseApprovals  CourseApproval[]
  registrations    Registration[]
  courseUploads    CourseUpload[]
  departmentStaff  DepartmentStaff?
  registrationCard RegistrationCard?
  attendanceRecords AttendanceRecord[] @relation("StudentAttendance")
  lecturedCourses   LecturerCourse[]
  attendanceTaken   AttendanceSession[] @relation("LecturerAttendance")
  announcements     Announcement[]     // Added relation to announcements
}

model Profile {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName       String
  middleName      String?
  lastName        String
  dateOfBirth     DateTime?
  gender          String?
  nationality     String?
  maritalStatus   String?
  religion        String?
  church          String?
  responsibility  String?
  referralSource  String?
  physicallyDisabled Boolean @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  users User[]
}

// Add the Announcement model
model Announcement {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  authorId  String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  author    User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)
}

model Department {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses        Course[]
  departmentStaff DepartmentStaff[]
}

model DepartmentStaff {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @unique @db.ObjectId
  departmentId String   @db.ObjectId
  isHead       Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
}

model Course {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  code         String   @unique
  title        String
  credits      Int
  description  String?
  departmentId String   @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  department     Department      @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  semesterCourses SemesterCourse[]
  courseUploads   CourseUpload[]
  lecturerCourses LecturerCourse[]
  timetableSlots  TimetableSlot[]
  attendanceSessions AttendanceSession[]
}

model Semester {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  registrationDeadline DateTime?
  courseUploadDeadline DateTime?

  semesterCourses  SemesterCourse[]
  registrations    Registration[]
  courseUploads    CourseUpload[]
  registrationCards RegistrationCard[]
  timetables       Timetable[]
  lecturerCourses  LecturerCourse[]
  attendanceSessions AttendanceSession[]
}

model SemesterCourse {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  semesterId String   @db.ObjectId
  courseId   String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  semester Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([semesterId, courseId])
}

model Registration {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  semesterId String   @db.ObjectId
  status     String   @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  semester Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)

  courseUploads CourseUpload[]

  @@unique([userId, semesterId])
}

model CourseUpload {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  registrationId String   @db.ObjectId
  courseId       String   @db.ObjectId
  userId         String   @db.ObjectId
  semesterId     String   @db.ObjectId
  status         String   @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  registration Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  course       Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  semester     Semester     @relation(fields: [semesterId], references: [id], onDelete: Cascade)

  approvals CourseApproval[]

  @@unique([registrationId, courseId])
}

model CourseApproval {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  courseUploadId String   @db.ObjectId
  approverId    String   @db.ObjectId
  status        String   // APPROVED, REJECTED
  comments      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  courseUpload CourseUpload @relation(fields: [courseUploadId], references: [id], onDelete: Cascade)
  approver     User         @relation(fields: [approverId], references: [id], onDelete: Cascade)
}

model RegistrationCard {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @unique @db.ObjectId
  semesterId String   @db.ObjectId
  cardNumber String   @unique
  issuedDate DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  semester Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)
}

// New models for timetable, lecturer assignment, and attendance

model LecturerCourse {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  lecturerId String   @db.ObjectId
  courseId   String   @db.ObjectId
  semesterId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  lecturer User     @relation(fields: [lecturerId], references: [id], onDelete: Cascade)
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  semester Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  timetableSlots TimetableSlot[]

  @@unique([lecturerId, courseId, semesterId])
}

model Timetable {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  semesterId String   @db.ObjectId
  name       String
  isPublished Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  semester Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  slots    TimetableSlot[]
}

model TimetableSlot {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  timetableId   String   @db.ObjectId
  courseId      String   @db.ObjectId
  lecturerCourseId String? @db.ObjectId
  dayOfWeek     Int      // 0 = Sunday, 1 = Monday, etc.
  startTime     String   // Format: HH:MM (24-hour)
  endTime       String   // Format: HH:MM (24-hour)
  roomNumber    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  timetable     Timetable @relation(fields: [timetableId], references: [id], onDelete: Cascade)
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lecturerCourse LecturerCourse? @relation(fields: [lecturerCourseId], references: [id], onDelete: SetNull)
}

model AttendanceSession {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId      String   @db.ObjectId
  lecturerId    String   @db.ObjectId
  semesterId    String   @db.ObjectId
  date          DateTime
  startTime     String   // Format: HH:MM (24-hour)
  endTime       String   // Format: HH:MM (24-hour)
  topic         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lecturer      User      @relation("LecturerAttendance", fields: [lecturerId], references: [id], onDelete: Cascade)
  semester      Semester  @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  records       AttendanceRecord[]
}

model AttendanceRecord {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionId     String   @db.ObjectId
  studentId     String   @db.ObjectId
  status        String   // PRESENT, ABSENT, LATE
  comments      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  session       AttendanceSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  student       User              @relation("StudentAttendance", fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([sessionId, studentId])
}
