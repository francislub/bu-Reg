// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  FACULTY
  ADMIN
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String    @unique
  password       String
  role           UserRole  @default(STUDENT)
  registrationNo String?   @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  profile        Profile?
  registrations  Registration[]
  notifications  Notification[]
  courses        Course[]  @relation("FacultyCourses")
}

model Profile {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @unique @db.ObjectId
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  department      String?
  program         String?
  campus          String?
  yearOfStudy     Int?
  phoneNumber     String?
  address         String?
  dateOfBirth     DateTime?
  gender          String?
  profileImageUrl String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Course {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  code            String   @unique
  title           String
  credits         Int
  description     String?
  department      String
  semester        String
  academicYear    String
  maxCapacity     Int
  currentEnrolled Int      @default(0)
  prerequisites   String[] @default([])
  facultyId       String?  @db.ObjectId
  faculty         User?    @relation("FacultyCourses", fields: [facultyId], references: [id])
  registrations   Registration[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Registration {
  id         String             @id @default(auto()) @map("_id") @db.ObjectId
  studentId  String             @db.ObjectId
  student    User               @relation(fields: [studentId], references: [id], onDelete: Cascade)
  courseId   String             @db.ObjectId
  course     Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  status     RegistrationStatus @default(PENDING)
  semester   String
  academicYear String
  registeredAt DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@unique([studentId, courseId, semester, academicYear])
}

enum NotificationType {
  SYSTEM
  REGISTRATION
  DEADLINE
  ANNOUNCEMENT
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  message   String
  type      NotificationType @default(SYSTEM)
  userId    String?          @db.ObjectId
  user      User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Report {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  data        Json
  type        String
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

